import React, { useState, useEffect } from 'react';
import bitrixService from '../services/bitrix';
import { ReservationService } from '../services/api';
import Toast from './Toast';

const reservationService = new ReservationService();

const CRMForm = ({ isOpen, onClose, propertyData = {}, userData = null, isAuthenticated = false }) => {
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [formData, setFormData] = useState({
    name: '',
    phone: '',
    email: '',
    message: ''
  });
  const [toasts, setToasts] = useState([]);

  // Auto-fill form when user is authenticated
  useEffect(() => {
    if (isAuthenticated && userData) {
      setFormData(prev => ({
        ...prev,
        name: userData.full_name || userData.name || prev.name,
        phone: userData.phone || prev.phone,
        email: userData.email || prev.email,
        message: prev.message // Keep existing message
      }));
    }
  }, [isAuthenticated, userData, isOpen]);

  // Reset form when modal closes
  useEffect(() => {
    if (!isOpen) {
      // Only reset if user is not authenticated, otherwise keep user data
      if (!isAuthenticated) {
        setFormData({
          name: '',
          phone: '',
          email: '',
          message: ''
        });
      } else {
        // Keep user data but reset message
        setFormData(prev => ({
          ...prev,
          message: ''
        }));
      }
    }
  }, [isOpen, isAuthenticated]);

  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setFormData(prev => ({
      ...prev,
      [name]: value
    }));
  };

  // Toast functions
  const showToast = (message, type = 'success') => {
    const id = Date.now();
    const newToast = { id, message, type };
    setToasts(prev => [...prev, newToast]);
  };

  const removeToast = (id) => {
    setToasts(prev => prev.filter(toast => toast.id !== id));
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    setIsSubmitting(true);

    try {
      // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
      const leadData = {
        title: `–ó–∞—è–≤–∫–∞ —Å —Å–∞–π—Ç–∞: ${propertyData?.name || '–ù–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å'}`,
        name: formData.name,
        phone: formData.phone,
        email: formData.email,
        comments: `
–°–æ–æ–±—â–µ–Ω–∏–µ: ${formData.message}

=== –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ù–ï–î–í–ò–ñ–ò–ú–û–°–¢–ò ===
–ù–∞–∑–≤–∞–Ω–∏–µ: ${propertyData?.name || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
–†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ: ${propertyData?.location || propertyData?.address || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
–¶–µ–Ω–∞: ${propertyData?.price || propertyData?.formatted_price || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
–ü–ª–æ—â–∞–¥—å: ${propertyData?.area || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
–ö–æ–º–Ω–∞—Ç: ${propertyData?.rooms || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
–ó–∞—Å—Ç—Ä–æ–π—â–∏–∫: ${propertyData?.developer || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
–ü—Ä–æ–µ–∫—Ç: ${propertyData?.project || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}

=== –ö–û–ù–¢–ê–ö–¢–ù–´–ï –î–ê–ù–ù–´–ï ===
–ò–º—è: ${formData.name}
–¢–µ–ª–µ—Ñ–æ–Ω: ${formData.phone}
Email: ${formData.email || '–ù–µ —É–∫–∞–∑–∞–Ω'}

–ò—Å—Ç–æ—á–Ω–∏–∫: –°–∞–π—Ç –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏
–î–∞—Ç–∞: ${new Date().toLocaleString('ru-RU')}
        `.trim(),
        source: '–°–∞–π—Ç –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏',
        // –¶–µ–Ω–∞ —Å–¥–µ–ª–∫–∏
        opportunity: bitrixService.parsePrice(propertyData?.price || propertyData?.formatted_price || '0'),
        currency: 'RUB',
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏
        propertyId: propertyData?.id,
        propertyType: propertyData?.property_type,
        propertyArea: propertyData?.area,
        propertyRooms: propertyData?.rooms
      };

      // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ —Ü–µ–Ω—ã
      const priceValue = propertyData?.price || propertyData?.formatted_price || '0';
      console.log('üîç –û—Ç–ª–∞–¥–∫–∞ —Ü–µ–Ω—ã - –î–û –ø–∞—Ä—Å–∏–Ω–≥–∞:', {
        priceValue: priceValue,
        priceValueType: typeof priceValue,
        originalPrice: propertyData?.price,
        originalPriceType: typeof propertyData?.price,
        formattedPrice: propertyData?.formatted_price,
        formattedPriceType: typeof propertyData?.formatted_price,
        propertyData: propertyData
      });
      
      const parsedPrice = bitrixService.parsePrice(priceValue);
      console.log('üîç –û—Ç–ª–∞–¥–∫–∞ —Ü–µ–Ω—ã - –ü–û–°–õ–ï –ø–∞—Ä—Å–∏–Ω–≥–∞:', {
        parsedPrice: parsedPrice,
        parsedPriceType: typeof parsedPrice
      });

      // –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ –ë–∏—Ç—Ä–∏–∫—Å24 (–∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–¥–µ–ª–∫—É –¥–ª—è –ª—É—á—à–µ–π —Ä–∞–±–æ—Ç—ã —Å —Ü–µ–Ω–∞–º–∏)
      const result = await bitrixService.sendDeal(leadData);

      if (result.success) {
        let successMessage = `–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞! –°–æ–∑–¥–∞–Ω –∫–æ–Ω—Ç–∞–∫—Ç (ID: ${result.contactId}) –∏ —Å–¥–µ–ª–∫–∞ (ID: ${result.dealId}) –≤ CRM. –ú–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.`;
        
        // –°–æ–∑–¥–∞–µ–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        if (isAuthenticated && propertyData?.id) {
          try {
            console.log('üîñ CRMForm: Creating reservation for property', propertyData.id);
            const reservationResponse = await reservationService.createReservation(
              propertyData.id, 
              `–ó–∞—è–≤–∫–∞ —á–µ—Ä–µ–∑ —Ñ–æ—Ä–º—É: ${formData.message || '–ò–Ω—Ç–µ—Ä–µ—Å –∫ –æ–±—ä–µ–∫—Ç—É'}`
            );
            
            if (reservationResponse.success) {
              console.log('‚úÖ CRMForm: Reservation created successfully');
              successMessage += ` –û–±—ä–µ–∫—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≤–∞—à–∏ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ.`;
            } else {
              console.warn('‚ö†Ô∏è CRMForm: Reservation creation failed:', reservationResponse.error);
              // Don't show error for reservation failure, as the main form submission was successful
            }
          } catch (reservationError) {
            console.error('‚ùå CRMForm: Error creating reservation:', reservationError);
            // Don't show error for reservation failure, as the main form submission was successful
          }
        }
        
        showToast(successMessage, 'success');
        
        // –°–±—Ä–æ—Å —Ñ–æ—Ä–º—ã (—Å —É—á–µ—Ç–æ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏)
        if (isAuthenticated && userData) {
          // –î–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Ö –¥–∞–Ω–Ω—ã–µ, –æ—á–∏—â–∞–µ–º —Ç–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
          setFormData(prev => ({
            ...prev,
            message: ''
          }));
        } else {
          // –î–ª—è –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ—á–∏—â–∞–µ–º –≤—Å–µ –ø–æ–ª—è
          setFormData({
            name: '',
            phone: '',
            email: '',
            message: ''
          });
        }
        
        // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –ø–æ—Å–ª–µ –Ω–µ–±–æ–ª—å—à–æ–π –∑–∞–¥–µ—Ä–∂–∫–∏, —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å toast
        setTimeout(() => {
          onClose();
        }, 3000); // Slightly longer delay to show the reservation message
      } else {
        throw new Error(result.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞');
      }

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞—è–≤–∫–∏:', error);
      showToast('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞—è–≤–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É.', 'error');
    } finally {
      setIsSubmitting(false);
    }
  };

  if (!isOpen) return null;

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
      <div className="bg-white rounded-lg shadow-xl max-w-md w-full max-h-[90vh] overflow-y-auto">
        {/* Header */}
        <div className="p-6 border-b border-gray-200">
          <div className="flex items-center justify-between">
            <div className="flex items-center space-x-2">
              <h2 className="text-xl font-bold text-gray-800">–°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º</h2>
              {isAuthenticated && (
                <span className="text-xs bg-green-100 text-green-800 px-2 py-1 rounded-full border border-green-200">
                  ‚úì –î–∞–Ω–Ω—ã–µ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã
                </span>
              )}
            </div>
            <button
              onClick={onClose}
              className="text-gray-400 hover:text-gray-600 text-2xl font-bold"
            >
              √ó
            </button>
          </div>
          {propertyData.name && (
            <p className="text-sm text-gray-600 mt-2">
              –ü–æ –æ–±—ä–µ–∫—Ç—É: {propertyData.name}
            </p>
          )}
          {isAuthenticated && (
            <p className="text-xs text-blue-600 mt-2">
              üí° –í–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è
            </p>
          )}
        </div>

        {/* Form */}
        <form onSubmit={handleSubmit} className="p-6">
          <div className="space-y-4">
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                –ò–º—è *
                {isAuthenticated && userData?.name && (
                  <span className="ml-1 text-xs text-green-600">‚Ä¢ –∞–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–æ</span>
                )}
              </label>
              <input
                type="text"
                name="name"
                value={formData.name}
                onChange={handleInputChange}
                required
                className={`w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 ${
                  isAuthenticated && userData?.name 
                    ? 'border-green-300 bg-green-50' 
                    : 'border-gray-300'
                }`}
                placeholder="–í–∞—à–µ –∏–º—è"
              />
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                –¢–µ–ª–µ—Ñ–æ–Ω *
                {isAuthenticated && userData?.phone && (
                  <span className="ml-1 text-xs text-green-600">‚Ä¢ –∞–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–æ</span>
                )}
              </label>
              <input
                type="tel"
                name="phone"
                value={formData.phone}
                onChange={handleInputChange}
                required
                className={`w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 ${
                  isAuthenticated && userData?.phone 
                    ? 'border-green-300 bg-green-50' 
                    : 'border-gray-300'
                }`}
                placeholder="+7 (999) 123-45-67"
              />
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                Email
                {isAuthenticated && userData?.email && (
                  <span className="ml-1 text-xs text-green-600">‚Ä¢ –∞–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–æ</span>
                )}
              </label>
              <input
                type="email"
                name="email"
                value={formData.email}
                onChange={handleInputChange}
                className={`w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 ${
                  isAuthenticated && userData?.email 
                    ? 'border-green-300 bg-green-50' 
                    : 'border-gray-300'
                }`}
                placeholder="example@mail.ru"
              />
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                –°–æ–æ–±—â–µ–Ω–∏–µ
              </label>
              <textarea
                name="message"
                value={formData.message}
                onChange={handleInputChange}
                rows="3"
                className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                placeholder="–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏–ª–∏ –≤–æ–ø—Ä–æ—Å—ã..."
              />
            </div>

            {/* Property Info Display */}
            {propertyData.name && (
              <div className="bg-gray-50 p-3 rounded-md">
                <p className="text-sm font-medium text-gray-800">–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ–±—ä–µ–∫—Ç–µ:</p>
                <p className="text-sm text-gray-600">‚Ä¢ {propertyData.name}</p>
                {propertyData.formatted_price && (
                  <p className="text-sm text-gray-600">‚Ä¢ –¶–µ–Ω–∞: {propertyData.formatted_price}</p>
                )}
                {propertyData.developer && (
                  <p className="text-sm text-gray-600">‚Ä¢ –ó–∞—Å—Ç—Ä–æ–π—â–∏–∫: {propertyData.developer}</p>
                )}
              </div>
            )}
          </div>

          {/* Footer */}
          <div className="flex space-x-3 mt-6">
            <button
              type="button"
              onClick={onClose}
              className="flex-1 px-4 py-2 border border-gray-300 text-gray-700 rounded-md hover:bg-gray-50 transition-colors"
              disabled={isSubmitting}
            >
              –û—Ç–º–µ–Ω–∞
            </button>
            <button
              type="submit"
              disabled={isSubmitting}
              className="flex-1 px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
            >
              {isSubmitting ? '–û—Ç–ø—Ä–∞–≤–∫–∞...' : '–û—Ç–ø—Ä–∞–≤–∏—Ç—å'}
            </button>
          </div>
        </form>
      </div>
      
      {/* Toast notifications */}
      {toasts.map((toast) => (
        <Toast
          key={toast.id}
          message={toast.message}
          type={toast.type}
          duration={4000}
          onClose={() => removeToast(toast.id)}
        />
      ))}
    </div>
  );
};

export default CRMForm; 