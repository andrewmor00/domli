// Bitrix24 CRM Integration Service

class BitrixService {
  constructor() {
    // URL –ø–æ—Ä—Ç–∞–ª–∞ –ë–∏—Ç—Ä–∏–∫—Å24
    this.portalUrl = "https://b24-bvtv4z.bitrix24.ru";
    // Webhook URL –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ (–ù–û–í–´–ô –≤–µ–±—Ö—É–∫)
    this.webhookUrl =
      "https://b24-bvtv4z.bitrix24.ru/rest/1/bal8wrv83oix1jg9/crm.lead.add";
    // URL –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–¥–µ–ª–æ–∫
    this.dealWebhookUrl =
      "https://b24-bvtv4z.bitrix24.ru/rest/1/bal8wrv83oix1jg9/crm.deal.add";
    // URL –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
    this.contactWebhookUrl =
      "https://b24-bvtv4z.bitrix24.ru/rest/1/bal8wrv83oix1jg9/crm.contact.add";
  }

  async sendLead(leadData) {
    try {

      // –§–æ—Ä–º–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è GET –∑–∞–ø—Ä–æ—Å–∞
      const params = new URLSearchParams({
        "fields[TITLE]": leadData.title,
        "fields[NAME]": leadData.name,
        "fields[PHONE][0][VALUE]": leadData.phone,
        "fields[PHONE][0][VALUE_TYPE]": "WORK",
        "fields[EMAIL][0][VALUE]": leadData.email,
        "fields[EMAIL][0][VALUE_TYPE]": "WORK",
        "fields[COMMENTS]": leadData.comments,
        "fields[SOURCE_ID]": "WEB",
        "fields[SOURCE_DESCRIPTION]": leadData.source || "–°–∞–π—Ç –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏",
        // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—è –¥–ª—è —Ü–µ–Ω—ã —Å–¥–µ–ª–∫–∏
        "fields[OPPORTUNITY]": leadData.opportunity || 0, // –°—É–º–º–∞ —Å–¥–µ–ª–∫–∏
        "fields[CURRENCY_ID]": leadData.currency || "RUB", // –í–∞–ª—é—Ç–∞
      });

      // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –ø–æ–ª—è –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
      if (leadData.propertyId) {
        params.append("fields[UF_CRM_PROPERTY_ID]", leadData.propertyId);
      }
      if (leadData.propertyType) {
        params.append("fields[UF_CRM_PROPERTY_TYPE]", leadData.propertyType);
      }
      if (leadData.propertyArea) {
        params.append("fields[UF_CRM_PROPERTY_AREA]", leadData.propertyArea);
      }
      if (leadData.propertyRooms) {
        params.append("fields[UF_CRM_PROPERTY_ROOMS]", leadData.propertyRooms);
      }

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º GET –∑–∞–ø—Ä–æ—Å (–ë–∏—Ç—Ä–∏–∫—Å24 REST API –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç GET)
      const response = await fetch(`${this.webhookUrl}?${params.toString()}`, {
        method: "GET",
        headers: {
          "Content-Type": "application/json",
        },
      });

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }

      const result = await response.json();

      return {
        success: true,
        leadId: result.result,
        data: result,
      };
    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –ë–∏—Ç—Ä–∏–∫—Å24:", error);

      return {
        success: false,
        error: error.message,
        details: error,
      };
    }
  }

  // –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞ –≤ –ë–∏—Ç—Ä–∏–∫—Å24
  async createContact(contactData) {
    try {
      console.log("üì§ –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞ –≤ –ë–∏—Ç—Ä–∏–∫—Å24:", contactData);

      const params = new URLSearchParams({
        "fields[NAME]": contactData.name || "–ö–ª–∏–µ–Ω—Ç",
        "fields[PHONE][0][VALUE]": contactData.phone,
        "fields[PHONE][0][VALUE_TYPE]": "WORK",
        "fields[EMAIL][0][VALUE]": contactData.email,
        "fields[EMAIL][0][VALUE_TYPE]": "WORK",
        "fields[SOURCE_ID]": "WEB",
        "fields[SOURCE_DESCRIPTION]": "–°–∞–π—Ç –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏",
      });

      const response = await fetch(`${this.contactWebhookUrl}?${params.toString()}`, {
        method: "GET",
        headers: {
          "Content-Type": "application/json",
        },
      });

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }

      const result = await response.json();
      console.log("‚úÖ –ö–æ–Ω—Ç–∞–∫—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –≤ –ë–∏—Ç—Ä–∏–∫—Å24:", result);

      return {
        success: true,
        contactId: result.result,
        data: result,
      };
    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞ –≤ –ë–∏—Ç—Ä–∏–∫—Å24:", error);
      return {
        success: false,
        error: error.message,
        details: error,
      };
    }
  }

  // –°–æ–∑–¥–∞–Ω–∏–µ —Å–¥–µ–ª–∫–∏ –≤ –ë–∏—Ç—Ä–∏–∫—Å24 (—Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º —Å–æ–∑–¥–∞–Ω–∏–µ–º –∫–æ–Ω—Ç–∞–∫—Ç–∞)
  async sendDeal(dealData) {
    try {
      console.log("üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–¥–µ–ª–∫–∏ –≤ –ë–∏—Ç—Ä–∏–∫—Å24:", dealData);

      // –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–∞–∫—Ç
      const contactResult = await this.createContact({
        name: dealData.name,
        phone: dealData.phone,
        email: dealData.email,
      });

      if (!contactResult.success) {
        throw new Error(`–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞: ${contactResult.error}`);
      }

      // –§–æ—Ä–º–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–¥–µ–ª–∫–∏
      const params = new URLSearchParams({
        "fields[TITLE]": dealData.title,
        "fields[TYPE_ID]": "GOODS", // –¢–∏–ø —Å–¥–µ–ª–∫–∏ - –ø—Ä–æ–¥–∞–∂–∞ —Ç–æ–≤–∞—Ä–æ–≤
        "fields[STAGE_ID]": "NEW", // –≠—Ç–∞–ø —Å–¥–µ–ª–∫–∏ - –Ω–æ–≤–∞—è
        "fields[OPPORTUNITY]": dealData.opportunity || 0, // –°—É–º–º–∞ —Å–¥–µ–ª–∫–∏
        "fields[CURRENCY_ID]": dealData.currency || "RUB", // –í–∞–ª—é—Ç–∞
        "fields[COMMENTS]": dealData.comments,
        "fields[SOURCE_ID]": "WEB",
        "fields[SOURCE_DESCRIPTION]": dealData.source || "–°–∞–π—Ç –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏",
        "fields[CONTACT_ID]": contactResult.contactId, // –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–∞–∫—Ç
      });

      // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –ø–æ–ª—è
      if (dealData.propertyId) {
        params.append("fields[UF_CRM_PROPERTY_ID]", dealData.propertyId);
      }
      if (dealData.propertyType) {
        params.append("fields[UF_CRM_PROPERTY_TYPE]", dealData.propertyType);
      }
      if (dealData.propertyArea) {
        params.append("fields[UF_CRM_PROPERTY_AREA]", dealData.propertyArea);
      }
      if (dealData.propertyRooms) {
        params.append("fields[UF_CRM_PROPERTY_ROOMS]", dealData.propertyRooms);
      }

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
      const response = await fetch(`${this.dealWebhookUrl}?${params.toString()}`, {
        method: "GET",
        headers: {
          "Content-Type": "application/json",
        },
      });

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }

      const result = await response.json();
      console.log("‚úÖ –°–¥–µ–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ –≤ –ë–∏—Ç—Ä–∏–∫—Å24:", result);

      return {
        success: true,
        dealId: result.result,
        contactId: contactResult.contactId,
        data: result,
      };
    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–¥–µ–ª–∫–∏ –≤ –ë–∏—Ç—Ä–∏–∫—Å24:", error);

      return {
        success: false,
        error: error.message,
        details: error,
      };
    }
  }

  // –ü–∞—Ä—Å–∏–Ω–≥ —Ü–µ–Ω—ã –∏–∑ —Å—Ç—Ä–æ–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "5.2 –º–ª–Ω ‚ÇΩ" -> 5200000)
  parsePrice(priceInput) {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ null, undefined, –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É
      if (priceInput === null || priceInput === undefined || priceInput === '') {
        return 0;
      }
      
      // –ï—Å–ª–∏ —É–∂–µ —á–∏—Å–ª–æ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ–≥–æ
      if (typeof priceInput === 'number') {
        return Math.round(priceInput);
      }
      
      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å—Ç—Ä–æ–∫—É, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ —Å—Ç—Ä–æ–∫–∞
      const priceString = String(priceInput);
      
      // –£–¥–∞–ª—è–µ–º –≤—Å–µ –∫—Ä–æ–º–µ —Ü–∏—Ñ—Ä, —Ç–æ—á–µ–∫ –∏ –∑–∞–ø—è—Ç—ã—Ö
      const cleanPrice = priceString.replace(/[^\d.,]/g, '');
      
      if (!cleanPrice) return 0;
      
      // –ó–∞–º–µ–Ω—è–µ–º –∑–∞–ø—è—Ç—É—é –Ω–∞ —Ç–æ—á–∫—É –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞
      const normalizedPrice = cleanPrice.replace(',', '.');
      const price = parseFloat(normalizedPrice);
      
      if (isNaN(price)) return 0;
      
      // –ï—Å–ª–∏ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–µ –µ—Å—Ç—å "–º–ª–Ω", —É–º–Ω–æ–∂–∞–µ–º –Ω–∞ –º–∏–ª–ª–∏–æ–Ω
      if (priceString.toLowerCase().includes('–º–ª–Ω')) {
        return Math.round(price * 1000000);
      }
      
      // –ï—Å–ª–∏ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–µ –µ—Å—Ç—å "—Ç—ã—Å", —É–º–Ω–æ–∂–∞–µ–º –Ω–∞ —Ç—ã—Å—è—á—É
      if (priceString.toLowerCase().includes('—Ç—ã—Å')) {
        return Math.round(price * 1000);
      }
      
      return Math.round(price);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ü–µ–Ω—ã:', error, '–í—Ö–æ–¥–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:', priceInput);
      return 0;
    }
  }

  // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏
  formatComment(formData) {
    let comment = "";

    if (formData.message) {
      comment += `–°–æ–æ–±—â–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞: ${formData.message}\n\n`;
    }

    comment += "--- –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û–ë –û–ë–™–ï–ö–¢–ï ---\n";
    comment += `–û–±—ä–µ–∫—Ç: ${formData.propertyName}\n`;
    comment += `–¶–µ–Ω–∞: ${formData.propertyPrice}\n`;
    comment += `–ó–∞—Å—Ç—Ä–æ–π—â–∏–∫: ${formData.propertyDeveloper}\n`;
    comment += `–ü—Ä–æ–µ–∫—Ç: ${formData.propertyProject}\n`;
    comment += `–ò—Å—Ç–æ—á–Ω–∏–∫: ${formData.source}\n`;
    comment += `–í—Ä–µ–º—è –∑–∞—è–≤–∫–∏: ${formData.timestamp}`;

    return comment;
  }
}

export default new BitrixService();
