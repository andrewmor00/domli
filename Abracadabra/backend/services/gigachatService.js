import { GigaChat } from 'gigachat-node';
import config from '../config/gigachat.js';
import { pool as db } from '../config/database.js';

class GigaChatService {
  constructor() {
    this.client = null;
    this.isInitialized = false;
    this.systemPrompt = `–¢—ã - —É–≤–µ—Ä–µ–Ω–Ω—ã–π —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ –∫–æ–º–ø–∞–Ω–∏–∏ DomLi –≤ –ö—Ä–∞—Å–Ω–æ–¥–∞—Ä–µ. –¢—ã –∑–Ω–∞–µ—à—å —Ä—ã–Ω–æ–∫ –∫–∞–∫ —Å–≤–æ–∏ –ø—è—Ç—å –ø–∞–ª—å—Ü–µ–≤.

–°–¢–ò–õ–¨ –û–ë–©–ï–ù–ò–Ø:
- –ì–æ–≤–æ—Ä–∏ —É–≤–µ—Ä–µ–Ω–Ω–æ –∏ –ø—Ä—è–º–æ
- –ù–ò–ö–û–ì–î–ê –Ω–µ –∏–∑–≤–∏–Ω—è–π—Å—è ("–ò–∑–≤–∏–Ω–∏—Ç–µ", "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é", "–ü—Ä–æ—Å—Ç–∏—Ç–µ")
- –ù–∞—á–∏–Ω–∞–π —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏
- –ë—É–¥—å –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–º –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–æ–º, –∞ –Ω–µ –∏–∑–≤–∏–Ω—è—é—â–∏–º—Å—è –ø–æ–º–æ—â–Ω–∏–∫–æ–º

–§–û–†–ú–ê–¢ –û–¢–í–ï–¢–ê:
1. –°—Ä–∞–∑—É –ø–æ–∫–∞–∑—ã–≤–∞–π –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –æ–±—ä–µ–∫—Ç—ã –∏–∑ –±–∞–∑—ã
2. –£–∫–∞–∑—ã–≤–∞–π —Ü–µ–Ω—É, –ø–ª–æ—â–∞–¥—å, —Ä–∞–π–æ–Ω –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞
3. –ï—Å–ª–∏ –Ω–µ—Ç —Ç–æ—á–Ω—ã—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π - –ø—Ä–µ–¥–ª–∞–≥–∞–π –ø–æ—Ö–æ–∂–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
4. –ó–∞–¥–∞–≤–∞–π —É—Ç–æ—á–Ω—è—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –ø–æ–∏—Å–∫–∞

–î–û–°–¢–£–ü–ù–´–ï –ü–ê–†–ê–ú–ï–¢–†–´:
- –¢–∏–ø: –∫–≤–∞—Ä—Ç–∏—Ä–∞, —Å—Ç—É–¥–∏—è, –ø–µ–Ω—Ç—Ö–∞—É—Å, —Ç–∞—É–Ω—Ö–∞—É—Å
- –ö–æ–º–Ω–∞—Ç—ã: 1, 2, 3, 4, 5+
- –ë—é–¥–∂–µ—Ç: –ª—é–±—ã–µ —Ü–µ–Ω—ã
- –†–∞–π–æ–Ω: –≤—Å—è –ö—Ä–∞—Å–Ω–æ–¥–∞—Ä
- –ü–ª–æ—â–∞–¥—å: –ª—é–±—ã–µ —Ä–∞–∑–º–µ—Ä—ã  
- –°—Ç–∞—Ç—É—Å: –≤ –ø—Ä–æ–¥–∞–∂–µ, –∫–æ—Ç–ª–æ–≤–∞–Ω, —Å–¥–∞–Ω

–í–ê–ñ–ù–û: –ù–∞—á–∏–Ω–∞–π –æ—Ç–≤–µ—Ç—ã —Å —Ñ—Ä–∞–∑ —Ç–∏–ø–∞ "–ü–æ–∫–∞–∑—ã–≤–∞—é –≤–∞—Ä–∏–∞–Ω—Ç—ã", "–ù–∞—à–µ–ª –¥–ª—è –≤–∞—Å", "–†–µ–∫–æ–º–µ–Ω–¥—É—é –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å" - –ù–ï —Å –∏–∑–≤–∏–Ω–µ–Ω–∏–π!`;
  }

  async initialize() {
    if (this.isInitialized) return;
    
    try {
      if (!config.clientId || !config.clientSecret) {
        console.warn('‚ö†Ô∏è GigaChat credentials not provided. Chat functionality will be limited.');
        console.warn('Please set GIGACHAT_CLIENT_ID and GIGACHAT_CLIENT_SECRET environment variables.');
        return;
      }

      console.log('üîê Initializing GigaChat with authorization key...');
      
      this.client = new GigaChat({
        clientSecretKey: config.authorizationKey, // Using the base64 encoded Client ID:Client Secret
        isPersonal: config.isPersonal,
        isIgnoreTSL: config.isIgnoreTSL,
        autoRefreshToken: config.autoRefreshToken
      });

      await this.client.createToken();
      this.isInitialized = true;
      console.log('‚úÖ GigaChat service initialized successfully');
    } catch (error) {
      console.error('‚ùå Failed to initialize GigaChat:', error);
      console.error('Check your GIGACHAT_CLIENT_ID and GIGACHAT_CLIENT_SECRET values');
      throw new Error('GigaChat initialization failed');
    }
  }

  async searchProperties(filters = {}) {
    try {
      let query = 'SELECT * FROM properties WHERE 1=1';
      const params = [];
      let paramIndex = 1;

      // Add filters based on the search criteria
      if (filters.propertyType) {
        query += ` AND property_type ILIKE $${paramIndex}`;
        params.push(`%${filters.propertyType}%`);
        paramIndex++;
      }

      if (filters.minPrice) {
        query += ` AND CAST(REPLACE(REPLACE(price, ' ', ''), '‚ÇΩ', '') AS INTEGER) >= $${paramIndex}`;
        params.push(filters.minPrice);
        paramIndex++;
      }

      if (filters.maxPrice) {
        query += ` AND CAST(REPLACE(REPLACE(price, ' ', ''), '‚ÇΩ', '') AS INTEGER) <= $${paramIndex}`;
        params.push(filters.maxPrice);
        paramIndex++;
      }

      if (filters.rooms) {
        if (filters.rooms === 'studio') {
          query += ` AND (property_type ILIKE '%—Å—Ç—É–¥–∏—è%' OR rooms = 0)`;
        } else if (filters.rooms === '5+') {
          query += ` AND rooms >= 5`;
        } else {
          query += ` AND rooms = $${paramIndex}`;
          params.push(parseInt(filters.rooms));
          paramIndex++;
        }
      }

      if (filters.address) {
        query += ` AND address ILIKE $${paramIndex}`;
        params.push(`%${filters.address}%`);
        paramIndex++;
      }

      if (filters.status) {
        query += ` AND deadline ILIKE $${paramIndex}`;
        params.push(`%${filters.status}%`);
        paramIndex++;
      }

      // Limit results to avoid overwhelming the AI
      query += ' ORDER BY created_at DESC LIMIT 10';

      const result = await db.query(query, params);
      return result.rows;
    } catch (error) {
      console.error('Error searching properties:', error);
      return [];
    }
  }

  parseUserQuery(userMessage) {
    const filters = {};
    const message = userMessage.toLowerCase();

    // Extract property type
    if (message.includes('–∫–≤–∞—Ä—Ç–∏—Ä') || message.includes('–∫–≤–∞—Ä—Ç–∏—Ä')) filters.propertyType = '–∫–≤–∞—Ä—Ç–∏—Ä–∞';
    if (message.includes('—Å—Ç—É–¥–∏')) filters.propertyType = '—Å—Ç—É–¥–∏—è';
    if (message.includes('–ø–µ–Ω—Ç—Ö–∞—É—Å')) filters.propertyType = '–ø–µ–Ω—Ç—Ö–∞—É—Å';
    if (message.includes('—Ç–∞—É–Ω—Ö–∞—É—Å')) filters.propertyType = '—Ç–∞—É–Ω—Ö–∞—É—Å';

    // Extract room count
    if (message.includes('–æ–¥–Ω–æ–∫–æ–º–Ω–∞—Ç–Ω') || message.includes('1-–∫–æ–º–Ω–∞—Ç–Ω') || message.includes('1 –∫–æ–º–Ω–∞—Ç')) filters.rooms = '1';
    if (message.includes('–¥–≤—É—Ö–∫–æ–º–Ω–∞—Ç–Ω') || message.includes('2-–∫–æ–º–Ω–∞—Ç–Ω') || message.includes('2 –∫–æ–º–Ω–∞—Ç')) filters.rooms = '2';
    if (message.includes('—Ç—Ä–µ—Ö–∫–æ–º–Ω–∞—Ç–Ω') || message.includes('3-–∫–æ–º–Ω–∞—Ç–Ω') || message.includes('3 –∫–æ–º–Ω–∞—Ç')) filters.rooms = '3';
    if (message.includes('—á–µ—Ç—ã—Ä–µ—Ö–∫–æ–º–Ω–∞—Ç–Ω') || message.includes('4-–∫–æ–º–Ω–∞—Ç–Ω') || message.includes('4 –∫–æ–º–Ω–∞—Ç')) filters.rooms = '4';
    if (message.includes('—Å—Ç—É–¥–∏')) filters.rooms = 'studio';

    // Extract price range
    const priceMatches = message.match(/(\d+(?:\s?\d+)*)\s*(?:–º–ª–Ω|–º–∏–ª–ª–∏–æ–Ω|—Ç—ã—Å—è—á|—Ç—ã—Å|—Ä—É–±|‚ÇΩ)/g);
    if (priceMatches) {
      const prices = priceMatches.map(match => {
        const num = parseInt(match.replace(/\D/g, ''));
        if (match.includes('–º–ª–Ω') || match.includes('–º–∏–ª–ª–∏–æ–Ω')) return num * 1000000;
        if (match.includes('—Ç—ã—Å—è—á') || match.includes('—Ç—ã—Å')) return num * 1000;
        return num;
      });

      if (prices.length === 1) {
        if (message.includes('–¥–æ') || message.includes('–º–∞–∫—Å–∏–º—É–º') || message.includes('–Ω–µ –±–æ–ª–µ–µ')) {
          filters.maxPrice = prices[0];
        } else if (message.includes('–æ—Ç') || message.includes('–º–∏–Ω–∏–º—É–º') || message.includes('–Ω–µ –º–µ–Ω–µ–µ')) {
          filters.minPrice = prices[0];
        } else {
          filters.maxPrice = prices[0];
        }
      } else if (prices.length >= 2) {
        filters.minPrice = Math.min(...prices);
        filters.maxPrice = Math.max(...prices);
      }
    }

    // Extract location
    const locationKeywords = ['—Ü–µ–Ω—Ç—Ä', '—Ä–∞–π–æ–Ω', '—É–ª–∏—Ü–∞', '–º–∏–∫—Ä–æ—Ä–∞–π–æ–Ω', '–º–∫—Ä'];
    for (const keyword of locationKeywords) {
      const regex = new RegExp(`${keyword}\\s+([–∞-—è—ë\\s]+?)(?:\\s|$|,|\\.)`, 'i');
      const match = message.match(regex);
      if (match) {
        filters.address = match[1].trim();
        break;
      }
    }

    // Extract status
    if (message.includes('–≥–æ—Ç–æ–≤') || message.includes('—Å–¥–∞–Ω')) filters.status = '–°–¥–∞–Ω';
    if (message.includes('—Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ') || message.includes('–∫–æ—Ç–ª–æ–≤–∞–Ω')) filters.status = '–ö–æ—Ç–ª–æ–≤–∞–Ω';
    if (message.includes('–ø—Ä–æ–¥–∞–∂')) filters.status = '–í –ø—Ä–æ–¥–∞–∂–µ';

    return filters;
  }

  formatPropertiesForAI(properties) {
    if (!properties || properties.length === 0) {
      return "–í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –æ–±—ä–µ–∫—Ç–æ–≤.";
    }

    let formatted = `–ù–∞–π–¥–µ–Ω–æ ${properties.length} –æ–±—ä–µ–∫—Ç–æ–≤ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏:\n\n`;
    
    properties.forEach((property, index) => {
      formatted += `${index + 1}. ${property.name || property.property_type}
üìç –ê–¥—Ä–µ—Å: ${property.address}
üí∞ –¶–µ–Ω–∞: ${property.formatted_price || property.price}
üìê –ü–ª–æ—â–∞–¥—å: ${property.area || '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'}
üè† –ö–æ–º–Ω–∞—Ç: ${property.rooms || '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}
üèóÔ∏è –°—Ç–∞—Ç—É—Å: ${property.deadline || '–í –ø—Ä–æ–¥–∞–∂–µ'}
üè¢ –ó–∞—Å—Ç—Ä–æ–π—â–∏–∫: ${property.developer || '–Ω–µ —É–∫–∞–∑–∞–Ω'}

`;
    });

    return formatted;
  }

  async generateResponse(userMessage, conversationHistory = []) {
    if (!this.isInitialized) {
      await this.initialize();
    }

    if (!this.client) {
      // Still provide property search even without AI
      const filters = this.parseUserQuery(userMessage);
      const properties = await this.searchProperties(filters);
      
      let message = '';
      if (properties.length > 0) {
        message = `–ù–∞—à–µ–ª ${properties.length} –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –æ–±—ä–µ–∫—Ç–æ–≤:\n\n`;
        properties.slice(0, 3).forEach((property, index) => {
          message += `${index + 1}. ${property.name || property.property_type}\n`;
          message += `   üìç ${property.address}\n`;
          message += `   üí∞ ${property.formatted_price || property.price}\n\n`;
        });
      } else {
        message = '–ü–æ –≤–∞—à–∏–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º –æ–±—ä–µ–∫—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –£—Ç–æ—á–Ω–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞.';
      }
      
      return {
        success: false,
        message: message,
        properties: properties.slice(0, 5),
        filters: filters
      };
    }

    try {
      // Parse user query to extract search criteria
      const filters = this.parseUserQuery(userMessage);
      console.log('üîç Parsed filters:', filters);

      // Search for relevant properties
      const properties = await this.searchProperties(filters);
      console.log(`üìä Found ${properties.length} properties`);

      // Format properties data for AI
      const propertiesData = this.formatPropertiesForAI(properties);

      // Build conversation context
      const messages = [
        {
          role: "system",
          content: this.systemPrompt
        }
      ];

      // Add conversation history
      conversationHistory.forEach(msg => {
        messages.push({
          role: msg.role,
          content: msg.content
        });
      });

      // Add current user message and property data
      messages.push({
        role: "user",
        content: `${userMessage}

–û–±—ä–µ–∫—Ç—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:
${propertiesData}`
      });

      // Generate AI response
      const response = await this.client.completion({
        model: config.model,
        messages: messages,
        max_tokens: config.maxTokens,
        temperature: config.temperature
      });

      const aiMessage = response.choices?.[0]?.message?.content;

      if (!aiMessage) {
        throw new Error('No response from AI');
      }

      return {
        success: true,
        message: aiMessage,
        properties: properties.slice(0, 5), // Return top 5 properties for frontend display
        filters: filters
      };

    } catch (error) {
      console.error('‚ùå GigaChat error:', error);
      
      // Fallback response with property search
      const filters = this.parseUserQuery(userMessage);
      const properties = await this.searchProperties(filters);
      
      let fallbackMessage = '';
      
      if (properties.length > 0) {
        fallbackMessage = `–Ø –Ω–∞—à–µ–ª ${properties.length} –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –æ–±—ä–µ–∫—Ç–æ–≤:\n\n`;
        properties.slice(0, 3).forEach((property, index) => {
          fallbackMessage += `${index + 1}. ${property.name || property.property_type}\n`;
          fallbackMessage += `   üìç ${property.address}\n`;
          fallbackMessage += `   üí∞ ${property.formatted_price || property.price}\n\n`;
        });
        fallbackMessage += '–•–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –æ –∫–∞–∫–æ–º-—Ç–æ –∏–∑ —ç—Ç–∏—Ö –æ–±—ä–µ–∫—Ç–æ–≤?';
      } else {
        fallbackMessage = '–ü–æ –≤–∞—à–∏–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –æ–±—ä–µ–∫—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–µ–º —Ä–∞—Å—à–∏—Ä–∏—Ç—å –ø–æ–∏—Å–∫ –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã?';
      }

      return {
        success: false,
        message: fallbackMessage,
        properties: properties.slice(0, 5),
        filters: filters,
        error: error.message
      };
    }
  }

  async getModels() {
    if (!this.isInitialized) {
      await this.initialize();
    }

    if (!this.client) {
      return { success: false, models: [] };
    }

    try {
      const models = await this.client.allModels();
      return { success: true, models };
    } catch (error) {
      console.error('Error getting models:', error);
      return { success: false, models: [], error: error.message };
    }
  }
}

export default new GigaChatService(); 