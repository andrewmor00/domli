import bcrypt from 'bcryptjs';
import { pool } from '../config/database.js';
import dotenv from 'dotenv';

dotenv.config();

const seedData = async () => {
  const client = await pool.connect();
  
  try {
    console.log('üå± Starting database seeding...');
    
    // Hash password for test users
    const saltRounds = 12;
    const hashedPassword = await bcrypt.hash('password123', saltRounds);
    
    // Insert test users
    const users = [
      {
        first_name: '–ò–≤–∞–Ω',
        last_name: '–ò–≤–∞–Ω–æ–≤',
        email: 'ivan@example.com',
        phone: '+7 (999) 123-45-67',
        password_hash: hashedPassword
      },
      {
        first_name: '–ú–∞—Ä–∏—è',
        last_name: '–ü–µ—Ç—Ä–æ–≤–∞',
        email: 'maria@example.com',
        phone: '+7 (999) 234-56-78',
        password_hash: hashedPassword
      }
    ];
    
    for (const user of users) {
      const userResult = await client.query(
        `INSERT INTO users (first_name, last_name, email, phone, password_hash)
         VALUES ($1, $2, $3, $4, $5)
         ON CONFLICT (email) DO NOTHING
         RETURNING id`,
        [user.first_name, user.last_name, user.email, user.phone, user.password_hash]
      );
      
      if (userResult.rows.length > 0) {
        const userId = userResult.rows[0].id;
        
        // Insert user preferences
        await client.query(
          `INSERT INTO user_preferences (
            user_id, property_type, rooms, budget, move_in_date, living_with
          ) VALUES ($1, $2, $3, $4, $5, $6)
          ON CONFLICT DO NOTHING`,
          [userId, 'apartment', '2', '6‚Äì9 –º–ª–Ω ‚ÇΩ', '–í —ç—Ç–æ–º –≥–æ–¥—É', '–° –ø–∞—Ä—Ç–Ω—ë—Ä–æ–º']
        );
        
        console.log(`‚úÖ Created user: ${user.email}`);
      } else {
        console.log(`‚è≠Ô∏è  User already exists: ${user.email}`);
      }
    }
    
    // Insert sample properties
    const properties = [
      {
        title: '–°–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è 2-–∫–æ–º–Ω–∞—Ç–Ω–∞—è –∫–≤–∞—Ä—Ç–∏—Ä–∞ –≤ —Ü–µ–Ω—Ç—Ä–µ',
        description: '–ü—Ä–æ—Å—Ç–æ—Ä–Ω–∞—è –∫–≤–∞—Ä—Ç–∏—Ä–∞ —Å —Ä–µ–º–æ–Ω—Ç–æ–º, –º–µ–±–µ–ª—å—é –∏ —Ç–µ—Ö–Ω–∏–∫–æ–π. –û—Ç–ª–∏—á–Ω–∞—è —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–∞—è –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å.',
        property_type: 'apartment',
        rooms: 2,
        area: 65.5,
        price: 8500000,
        address: '—É–ª. –¢–≤–µ—Ä—Å–∫–∞—è, 15',
        city: '–ú–æ—Å–∫–≤–∞'
      },
      {
        title: '–≠–ª–∏—Ç–Ω—ã–π –ø–µ–Ω—Ç—Ö–∞—É—Å —Å –ø–∞–Ω–æ—Ä–∞–º–Ω—ã–º–∏ –æ–∫–Ω–∞–º–∏',
        description: '–†–æ—Å–∫–æ—à–Ω—ã–π –ø–µ–Ω—Ç—Ö–∞—É—Å —Å –≤–∏–¥–æ–º –Ω–∞ –≥–æ—Ä–æ–¥. –û—Ç–¥–µ–ª–∫–∞ –ø—Ä–µ–º–∏—É–º-–∫–ª–∞—Å—Å–∞.',
        property_type: 'penthouse',
        rooms: 3,
        area: 120.0,
        price: 25000000,
        address: '–ö—É—Ç—É–∑–æ–≤—Å–∫–∏–π –ø—Ä–æ—Å–ø–µ–∫—Ç, 25',
        city: '–ú–æ—Å–∫–≤–∞'
      },
      {
        title: '–ö–æ–º–º–µ—Ä—á–µ—Å–∫–æ–µ –ø–æ–º–µ—â–µ–Ω–∏–µ –ø–æ–¥ –æ—Ñ–∏—Å',
        description: '–ì–æ—Ç–æ–≤–æ–µ –æ—Ñ–∏—Å–Ω–æ–µ –ø–æ–º–µ—â–µ–Ω–∏–µ –≤ –±–∏–∑–Ω–µ—Å-—Ü–µ–Ω—Ç—Ä–µ. –û—Ç–ª–∏—á–Ω–∞—è –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞.',
        property_type: 'commercial',
        area: 150.0,
        price: 18000000,
        address: '–ü—Ä–µ—Å–Ω–µ–Ω—Å–∫–∞—è –Ω–∞–±–µ—Ä–µ–∂–Ω–∞—è, 8',
        city: '–ú–æ—Å–∫–≤–∞'
      },
      {
        title: '–£—é—Ç–Ω–∞—è 1-–∫–æ–º–Ω–∞—Ç–Ω–∞—è –∫–≤–∞—Ä—Ç–∏—Ä–∞',
        description: '–ö–æ–º–ø–∞–∫—Ç–Ω–∞—è –∫–≤–∞—Ä—Ç–∏—Ä–∞ –¥–ª—è –æ–¥–Ω–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞ –∏–ª–∏ –ø–∞—Ä—ã. –£–¥–æ–±–Ω–æ–µ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ.',
        property_type: 'apartment',
        rooms: 1,
        area: 35.0,
        price: 5500000,
        address: '—É–ª. –ê—Ä–±–∞—Ç, 10',
        city: '–ú–æ—Å–∫–≤–∞'
      },
      {
        title: '–ü—Ä–æ—Å—Ç–æ—Ä–Ω–∞—è 3-–∫–æ–º–Ω–∞—Ç–Ω–∞—è –∫–≤–∞—Ä—Ç–∏—Ä–∞',
        description: '–ë–æ–ª—å—à–∞—è —Å–µ–º—å—è –±—É–¥–µ—Ç —á—É–≤—Å—Ç–≤–æ–≤–∞—Ç—å —Å–µ–±—è –∫–æ–º—Ñ–æ—Ä—Ç–Ω–æ –≤ —ç—Ç–æ–π –∫–≤–∞—Ä—Ç–∏—Ä–µ.',
        property_type: 'apartment',
        rooms: 3,
        area: 85.0,
        price: 12000000,
        address: '–õ–µ–Ω–∏–Ω—Å–∫–∏–π –ø—Ä–æ—Å–ø–µ–∫—Ç, 45',
        city: '–ú–æ—Å–∫–≤–∞'
      }
    ];
    
    for (const property of properties) {
      await client.query(
        `INSERT INTO properties (
          title, description, property_type, rooms, area, price, address, city
        ) VALUES ($1, $2, $3, $4, $5, $6, $7, $8)
        ON CONFLICT DO NOTHING`,
        [
          property.title,
          property.description,
          property.property_type,
          property.rooms,
          property.area,
          property.price,
          property.address,
          property.city
        ]
      );
      
      console.log(`‚úÖ Created property: ${property.title}`);
    }
    
    console.log('üéâ Database seeding completed successfully!');
    
  } catch (error) {
    console.error('‚ùå Error seeding database:', error);
    throw error;
  } finally {
    client.release();
    await pool.end();
  }
};

// Run if called directly
if (import.meta.url === `file://${process.argv[1]}`) {
  seedData();
} 